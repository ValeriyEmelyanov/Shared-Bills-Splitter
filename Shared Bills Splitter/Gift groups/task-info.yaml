type: edu
files:
- name: src/splitter/Main.java
  visible: true
  text: |
    package splitter;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SharedBillsSplitterTestStage2.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.output.InfiniteLoopDetector;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.SimpleTestCase;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.math.BigDecimal;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Optional;
    import java.util.Random;
    import java.util.stream.Collectors;

    public class SharedBillsSplitterTestStage2 extends StageTest {

        static {
            InfiniteLoopDetector.setWorking(false);
        }

        private static final String UNKNOWN_COMMAND = "Unknown command";
        private static final String EXIT_ERROR = "Your program should stop after exit command";
        private static final String HELP_ERROR = "Help command should print all commands line by line in natural order";
        private static final String ILLEGAL_COMMAND_ARGUMENTS = "Illegal command arguments";
        private static final String ILLEGAL_ARGUMENTS_ERROR = "Your program should handle exceptions in incorrect command arguments input";
        private static final String UNKNOWN_GROUP = "Unknown group";
        private static final String NO_REPAYMENTS_NEED = "No repayments need";
        private static final String WRONG_CALCULATIONS = "Wrong calculations. Program should output owes list that " +
                "if every person in this list repay his owes then everyone will have zero balance and everyone will be paid off";

        enum Commands {
            help,
            borrow,
            repay,
            balance,
            exit,
            group,
            purchase
        }

        @Override
        public List<TestCase> generate() {
            return List.of(
                    new TestCase<String>()
                            .setCheckFunc(this::checkUnknownCommand)
                            .setAttach("someAttachText")
                            .setInput("someRandomText\n" +
                                    "exit"),

                    new SimpleTestCase("" +
                            "repay Ann\n" +
                            "exit",
                            ILLEGAL_COMMAND_ARGUMENTS)
                            .setFeedback(ILLEGAL_ARGUMENTS_ERROR),

                    new TestCase<String>()
                            .setCheckFunc(this::checkHelpCommand)
                            .setInput(concatLines(Commands.help.toString(), Commands.exit.toString())),

                    new TestCase().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();
                        main.start();
                        main.execute(Commands.exit.toString());
                        if (!main.isFinished()) {
                            return CheckResult.wrong(EXIT_ERROR);
                        }
                        return CheckResult.correct();
                    }),

                    new SimpleTestCase(
                            concatLines("2020.09.30 borrow Ann Bob 20.10",
                                    "2020.10.01 repay Ann Bob 10.22",
                                    "2020.10.10 borrow Bob Ann 7.35",
                                    "2020.10.15 repay Ann Bob 8.99",
                                    "repay Bob Ann 6.46",
                                    "2020.09.25 balance",
                                    "2020.10.30 balance open",
                                    "2020.10.20 balance close",
                                    "balance close",
                                    "exit"),
                            concatLines(
                                    NO_REPAYMENTS_NEED,
                                    "Ann owes Bob 20.10",
                                    "Bob owes Ann 6.46",
                                    NO_REPAYMENTS_NEED)
                    ).setFeedback("Money should be formatted with properly scale"),

                    new SimpleTestCase(
                            concatLines("borrow Ann Bob 25",
                                    "repay Ann Bob 15",
                                    "repay Bob Chuck 7",
                                    "borrow Ann Bob 4",
                                    "repay Bob Diana 5",
                                    "borrow Elon Diana 12",
                                    "repay Chuck Diana 14",
                                    "repay Chuck Diana 12",
                                    "balance close",
                                    "exit"),
                            concatLines(
                                    "Ann owes Bob 14.00",
                                    "Chuck owes Bob 7.00",
                                    "Diana owes Bob 5.00",
                                    "Diana owes Chuck 26.00",
                                    "Elon owes Diana 12.00")
                    ).setFeedback("Owes should be sorted by Person who owes and Person whom owes"),

                    new TestCase().setDynamicTesting(() -> {
                        Random random = new Random();
                        List<String> persons = List.of("Annabelle", "Billibob", "Carlos", "Diana", "Elon", "Finny");
                        String keyPerson = persons.get(random.nextInt(persons.size()));
                        BigDecimal keyBalanceBorrow = BigDecimal.ZERO;
                        BigDecimal keyBalanceRepay = BigDecimal.ZERO;
                        TestedProgram main = new TestedProgram();
                        main.start();
                        for (int i = 0; i < 100; i++) {
                            String personFrom = persons.get(random.nextInt(persons.size()));
                            String personTo = persons.get(random.nextInt(persons.size()));
                            if (personFrom.equalsIgnoreCase(personTo)) {
                                continue;
                            }
                            Commands command;
                            BigDecimal amount = new BigDecimal(
                                String.format("%d.%d", random.nextInt(200), random.nextInt(99)));

                            if (random.nextBoolean()) {
                                command = Commands.borrow;
                                if (personFrom.equals(keyPerson)) {
                                    keyBalanceBorrow = keyBalanceBorrow.add(amount);
                                }
                                if (personTo.equals(keyPerson)) {
                                    keyBalanceBorrow = keyBalanceBorrow.subtract(amount);
                                }
                            } else {
                                command = Commands.repay;
                                if (personFrom.equals(keyPerson)) {
                                    keyBalanceRepay = keyBalanceRepay.add(amount);
                                }
                                if (personTo.equals(keyPerson)) {
                                    keyBalanceRepay = keyBalanceRepay.subtract(amount);
                                }
                            }
                            String line = String.format("%s %s %s %s", command, personFrom, personTo, amount);
                            main.execute(line);
                        }
                        String result = main.execute("balance close");
                        Optional<BigDecimal> sum = Arrays.stream(result.split("\n"))
                                .filter(it -> it.contains(keyPerson))
                                .map(it -> {
                                    String[] split = it.split("\\s+");
                                    Character sign = it.startsWith(keyPerson) ? '+' : '-';
                                    return sign + split[split.length - 1];
                                })
                                .map(BigDecimal::new)
                                .reduce(BigDecimal::add);

                        BigDecimal sumBalance = keyBalanceBorrow.subtract(keyBalanceRepay);
                        if (sumBalance.compareTo(sum.orElse(BigDecimal.ZERO)) == 0) {
                            return CheckResult.correct();
                        }
                        return CheckResult.wrong(WRONG_CALCULATIONS);
                    }),


                    new TestCase().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();
                        main.start();
                        if (!main.execute("group create lowerCaseText").contains(ILLEGAL_COMMAND_ARGUMENTS)) {
                            return CheckResult.wrong(String.format(
                                "Group name must be UPPERCASE, otherwise \"%s\" should be printed",
                                    ILLEGAL_COMMAND_ARGUMENTS));
                        }
                        if (!main.execute("group show NOTFOUNDGROUP").contains(UNKNOWN_GROUP)) {
                            return CheckResult.wrong(
                                "It should be printed \"%s\" if the group have not been created yet");
                        }

                        main.execute("group create BOYS (Elon, Bob, Chuck)");
                        String showGroupResult = main.execute("group show BOYS").trim();
                        if (!equalsByLines(showGroupResult, "" +
                                "Bob\n" +
                                "Chuck\n" +
                                "Elon")) {
                            return CheckResult.wrong("Persons should be printed line by line sorted in ascending order");
                        }
                        return CheckResult.correct();
                    }),

                    new TestCase().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();
                        main.start();
                        main.execute("group create COFFEETEAM (Ann, Bob)");
                        main.execute("purchase Bob coffee 10 (COFFEETEAM)");
                        String balanceFirst = main.execute("balance close").trim();
                        if (!balanceFirst.equals("Ann owes Bob 5.00")) {
                            return CheckResult.wrong("Only Ann owes Bob. Bob should not owe to himself");
                        }
                        main.execute("repay Ann Bob 5.00");
                        String balanceSecond = main.execute("balance close").trim();
                        if (!balanceSecond.equals(NO_REPAYMENTS_NEED)) {
                            return CheckResult.wrong("If everybody owes zero, it should be printed \"No repayments need\"");
                        }
                        return CheckResult.correct();
                    }),

                    new TestCase().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();
                        main.start();
                        main.execute("group create FRIENDS (Ann, Bob, Chuck)");
                        main.execute("purchase Elon chocolate 12.50 (FRIENDS)");
                        String balanceResult = main.execute("balance close");
                        if (!equalsByLines(balanceResult, "" +
                                "Ann owes Elon 4.17\n" +
                                "Bob owes Elon 4.17\n" +
                                "Chuck owes Elon 4.16")) {
                            return CheckResult.wrong("Output should be the same as in example");
                        }
                        return CheckResult.correct();
                    }),

                    new TestCase().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();
                        main.start();
                        main.execute("group create BOYS (Elon, Bob, Chuck)");
                        main.execute("group create GIRLS (Ann, Diana)");
                        main.execute("2020.10.20 purchase Diana flowers 15.65 (BOYS)");
                        main.execute("2020.10.21 purchase Chuck chocolate 6.30 (BOYS)");
                        main.execute("2020.10.22 purchase Bob icecream 3.99 (GIRLS)");
                        String balanceCloseResult = main.execute("balance close");
                        if (!equalsByLines(balanceCloseResult, "" +
                                "Ann owes Bob 2.00\n" +
                                "Bob owes Chuck 2.10\n" +
                                "Bob owes Diana 3.23\n" +
                                "Chuck owes Diana 5.22\n" +
                                "Elon owes Chuck 2.10\n" +
                                "Elon owes Diana 5.21"))
                            return CheckResult.wrong("Output should be the same as in example");
                        return CheckResult.correct();
                    })


            );
        }

        private CheckResult checkHelpCommand(String reply, String attach) {
            String[] replyArr = reply.split("\n");
            List<String> commandList = getCommandList();
            if (replyArr.length != commandList.size()) {
                return CheckResult.wrong(HELP_ERROR);
            }
            for (int i = 0; i < replyArr.length; i++) {
                if (!replyArr[i].toLowerCase().startsWith(commandList.get(i).toLowerCase())) {
                    return CheckResult.wrong(HELP_ERROR);
                }
            }
            return CheckResult.correct();
        }

        private CheckResult checkUnknownCommand(String reply, String attach) {
            try {
                reply = reply.trim();
                Commands command = Commands.valueOf(reply);;
            } catch (IllegalArgumentException e) {
                if (!reply.toLowerCase().startsWith(UNKNOWN_COMMAND.toLowerCase())) {
                    return CheckResult.wrong(String.format(
                        "For unknown command output should start with: %s", UNKNOWN_COMMAND));
                }
            }
            return CheckResult.correct();
        }

        private List<String> getCommandList() {
            return Arrays.stream(Commands.values())
                    .map(Enum::toString)
                    .sorted().collect(Collectors.toList());
        }

        private String concatLines(List<String> strings) {
            return String.join("\n", strings);
        }

        private String concatLines(String... strings) {
            return String.join("\n", strings);
        }

        private static boolean equalsByLines(String sample, String linesStr) {
            List<String> sampleLines = strToLinesTrimmed(sample);
            List<String> lines = strToLinesTrimmed(linesStr);
            return sampleLines.equals(lines);
        }

        private static List<String> strToLinesTrimmed(String sample) {
            return sample.lines().map(String::trim).collect(Collectors.toList());
        }
    }
  learner_created: false
- name: src/splitter/command/BalanceCommand.java
  visible: true
  text: |
    package splitter.command;

    import splitter.controller.Controller;
    import splitter.model.Person;
    import splitter.model.Transaction;

    import java.time.LocalDate;
    import java.time.format.DateTimeFormatter;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Locale;
    import java.util.Map;
    import java.util.TreeMap;

    public class BalanceCommand implements Command {
        private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy.MM.dd");

        @Override
        public void execute(Controller controller) {
            String[] arguments = controller.getCommandArguments();

            int currentIndex = 0;
            LocalDate date = null;
            BalanceMode mode = null;

            if (currentIndex < arguments.length) {
                try {
                    date = LocalDate.parse(arguments[0], formatter);
                    currentIndex++;
                } catch (Exception ignored) {
                }
            }
            if (currentIndex < arguments.length) {
                mode = BalanceMode.valueOf(arguments[currentIndex].toUpperCase(Locale.ROOT));
                currentIndex ++;
            }

            if (currentIndex < arguments.length) {
                controller.getView().printInvalidCommandArguments();
                return;
            }

            if (date == null) {
                date = LocalDate.now();
            }
            if (mode == null) {
                mode = BalanceMode.CLOSE;
            }

            if (mode == BalanceMode.OPEN) {
                date = date.withDayOfMonth(1).minusDays(1);
            }

            Map<Person, Map<Person, Integer>> forDate = new TreeMap<>();
            List<Transaction> list = controller.getRegister().getList();
            for (Transaction record : list) {
                if (record.getDate().isAfter(date)) {
                    continue;
                }

                Map<Person, Integer> debts = forDate.computeIfAbsent(
                        record.getCreditor(), k -> new TreeMap<>());
                debts.put(record.getDebtor(),
                        debts.getOrDefault(record.getDebtor(), 0) - record.getSum());

                debts = forDate.computeIfAbsent(
                        record.getDebtor(), k -> new TreeMap<>());
                debts.put(record.getCreditor(),
                        debts.getOrDefault(record.getCreditor(), 0) + record.getSum());
            }

            List<String> balance = new ArrayList<>();
            for (Map.Entry<Person, Map<Person, Integer>> debtsEntry : forDate.entrySet()) {
                for (Map.Entry<Person, Integer> entry : debtsEntry.getValue().entrySet()) {
                    if (entry.getValue() <= 0) {
                        continue;
                    }
                    balance.add(String.format("%s owes %s %d",
                            debtsEntry.getKey().getName(),
                            entry.getKey().getName(),
                            entry.getValue()));
                }
            }

            controller.getView().printList(balance);
        }
    }

    enum BalanceMode {
        OPEN, CLOSE;
    }
  learner_created: true
- name: src/splitter/command/BorrowCommand.java
  visible: true
  text: |
    package splitter.command;

    import splitter.controller.Controller;

    public class BorrowCommand extends TransactionalOperation implements Command {
        @Override
        public void execute(Controller controller) {
            move(controller, 2, 1);
        }
    }
  learner_created: true
- name: src/splitter/command/TransactionalOperation.java
  visible: true
  text: |
    package splitter.command;

    import splitter.controller.Controller;
    import splitter.model.Person;
    import splitter.model.Transaction;
    import splitter.service.PersonService;

    import java.time.LocalDate;
    import java.time.format.DateTimeFormatter;

    public class TransactionalOperation {
        private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy.MM.dd");

        protected void move(Controller controller, int fromIndex, int toIndex) {
            String[] arguments = controller.getCommandArguments();
            if (arguments.length < 3) {
                controller.getView().printInvalidCommandArguments();
                return;
            }

            if (arguments.length == 3) {
                fromIndex--;
                toIndex--;
            }

            LocalDate date;
            int sum;
            try {
                date = arguments.length == 4 ? LocalDate.parse(arguments[0], formatter) : LocalDate.now();
                sum = Integer.parseInt(arguments[arguments.length == 4 ? 3 : 2]);
            } catch (Exception e) {
                controller.getView().printInvalidCommandArguments();
                return;
            }

            Person from = PersonService.getByName(arguments[fromIndex]);
            Person to = PersonService.getByName(arguments[toIndex]);
            if (from.equals(to)) {
                controller.getView().printInvalidCommandArguments();
                return;
            }

            controller.getRegister().add(
                    new Transaction(date, from, to, sum));
        }
    }
  learner_created: true
- name: src/splitter/service/PersonService.java
  visible: true
  text: |
    package splitter.service;

    import splitter.model.Person;

    import java.util.HashSet;
    import java.util.Optional;
    import java.util.Set;

    public class PersonService {
        private static final Set<Person> PEOPLE = new HashSet<>();

        private PersonService() {
        }

        public static Person getByName(String name) {
            Optional<Person> optionalPerson = PEOPLE.stream()
                    .filter(p -> p.getName().equals(name))
                    .findFirst();

            if (optionalPerson.isPresent()) {
                return optionalPerson.get();
            }

            Person person = new Person(name);
            PEOPLE.add(person);
            return person;
        }
    }
  learner_created: true
- name: src/splitter/model/Transaction.java
  visible: true
  text: |
    package splitter.model;

    import java.time.LocalDate;

    public class Transaction {
        private final LocalDate date;
        private final Person creditor;
        private final Person debtor;
        private final int sum;

        public Transaction(LocalDate date, Person from, Person to, int sum) {
            this.date = date;
            this.creditor = from;
            this.debtor = to;
            this.sum = sum;
        }

        public LocalDate getDate() {
            return date;
        }

        public Person getCreditor() {
            return creditor;
        }

        public Person getDebtor() {
            return debtor;
        }

        public int getSum() {
            return sum;
        }
    }
  learner_created: true
- name: src/splitter/command/Command.java
  visible: true
  text: |
    package splitter.command;

    import splitter.controller.Controller;

    public interface Command {
        void execute(Controller controller);
    }
  learner_created: true
- name: src/splitter/command/RepayCommand.java
  visible: true
  text: |
    package splitter.command;

    import splitter.controller.Controller;

    public class RepayCommand extends TransactionalOperation implements Command {
        @Override
        public void execute(Controller controller) {
            move(controller, 1, 2);
        }
    }
  learner_created: true
- name: src/splitter/model/Person.java
  visible: true
  text: |
    package splitter.model;

    import java.util.Objects;

    public class Person implements Comparable<Person> {
        private final String name;

        public Person(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Person person = (Person) o;
            return Objects.equals(getName(), person.getName());
        }

        @Override
        public int hashCode() {
            return Objects.hash(getName());
        }

        @Override
        public int compareTo(Person person) {
            return name.compareTo(person.getName());
        }
    }
  learner_created: true
- name: src/splitter/command/HelpCommand.java
  visible: true
  text: |
    package splitter.command;

    import splitter.controller.Controller;

    public class HelpCommand implements Command {
        @Override
        public void execute(Controller controller) {
            controller.getView().printCommandList();
        }
    }
  learner_created: true
- name: src/splitter/view/ConsoleView.java
  visible: true
  text: |
    package splitter.view;

    import splitter.command.MenuCommand;

    import java.util.List;

    public class ConsoleView {
        public void printCommandList() {
            for (MenuCommand menuCommand : MenuCommand.values()) {
                System.out.println(menuCommand.name().toLowerCase());
            }
        }

        public void printUnknownCommand() {
            System.out.println("Unknown command. Print help to show commands list");
        }

        public void printInvalidCommandArguments() {
            System.out.println("Illegal command arguments");
        }

        public void printList(List<String> balance) {
            if (balance.isEmpty()) {
                System.out.println("No repayments need");
            } else {
                balance.forEach(System.out::println);
            }
        }
    }
  learner_created: true
- name: src/splitter/command/MenuCommand.java
  visible: true
  text: |
    package splitter.command;

    import splitter.controller.Controller;

    public enum MenuCommand implements Command {
        BALANCE(new BalanceCommand()),
        BORROW(new BorrowCommand()),
        EXIT(null),
        HELP(new HelpCommand()),
        REPAY(new RepayCommand());

        private final Command command;

        MenuCommand(Command command) {
            this.command = command;
        }

        @Override
        public void execute(Controller controller) {
            if (command == null) {
                return;
            }
            command.execute(controller);
        }
    }
  learner_created: true
- name: src/splitter/command/GroupCommand.java
  visible: true
  learner_created: true
- name: src/splitter/command/Purchase.java
  visible: true
  learner_created: true
- name: src/splitter/model/Group.java
  visible: true
  learner_created: true
- name: src/splitter/service/GroupService.java
  visible: true
  learner_created: true
- name: src/splitter/controller/Controller.java
  visible: true
  text: |
    package splitter.controller;

    import splitter.command.Command;
    import splitter.command.MenuCommand;
    import splitter.model.Register;
    import splitter.view.ConsoleView;

    import java.util.Arrays;
    import java.util.Scanner;

    public class Controller {
        private final Scanner scanner;
        private final ConsoleView view;

        private final Register register;

        private String[] commandArguments;

        public Controller() {
            this.scanner = new Scanner(System.in);
            this.view = new ConsoleView();
            this.register = new Register();
        }

        public ConsoleView getView() {
            return view;
        }
        public String[] getCommandArguments() {
            return commandArguments;
        }

        public Register getRegister() {
            return register;
        }

        public void run() {
            String commandLine;
            while (!(commandLine = scanner.nextLine()).equalsIgnoreCase("exit")) {
                String[] commandParts = commandLine.split("\\s+");
                String commandName = parseCommandParts(commandParts);
                if (commandName == null) {
                    view.printUnknownCommand();
                    continue;
                }

                Command menuCommand;
                try {
                    menuCommand = MenuCommand.valueOf(commandName);
                } catch (IllegalArgumentException e) {
                    view.printUnknownCommand();
                    continue;
                }
                menuCommand.execute(this);
            }
        }

        private String parseCommandParts(String[] commandParts) {
            String commandName = null;

            for (MenuCommand command : MenuCommand.values()) {
                if (command.name().equals(commandParts[0].toUpperCase())) {
                    commandName = commandParts[0].toUpperCase();
                    if (commandParts.length > 1) {
                        commandArguments = Arrays.copyOfRange(
                                commandParts, 1, commandParts.length);
                    } else {
                        commandArguments = new String[0];
                    }
                    break;
                }
                if (commandParts.length > 1 &&
                        command.name().equals(commandParts[1].toUpperCase())) {
                    commandName = commandParts[1].toUpperCase();
                    commandArguments = new String[commandParts.length - 1];
                    commandArguments[0] = commandParts[0];
                    if (commandArguments.length > 1) {
                        System.arraycopy(commandParts, 2,
                                commandArguments, 1, commandArguments.length - 1);
                    }
                    break;
                }
            }

            return commandName;
        }
    }
  learner_created: true
- name: src/splitter/service/TransactionService.java
  visible: true
  text: |
    package splitter.model;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;

    public class Register {
        private final List<Transaction> list;

        public Register() {
            this.list = new ArrayList<>();
        }

        public List<Transaction> getList() {
            return Collections.unmodifiableList(list);
        }

        public void add(Transaction record) {
            list.add(record);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/142/stages/766/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 09 Mar 2021 20:01:05 UTC
record: -1
